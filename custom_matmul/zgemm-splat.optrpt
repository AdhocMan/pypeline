Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: otcopy_8(int, int, const double __complex__ *, int, double __complex__ *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ztcopy_8.h(80,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztcopy_8.h(96,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (98:4) and *(boffset1+1008) (248:6)
   LOOP END
LOOP END

LOOP BEGIN at ztcopy_8.h(438,5)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(438,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (441:2) and *(boffset1+496) (515:4)
LOOP END

LOOP BEGIN at ztcopy_8.h(622,5)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(622,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (624:2) and *(boffset1+240) (660:4)
LOOP END

LOOP BEGIN at ztcopy_8.h(727,5)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(727,5)
<Multiversioned v2, Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(727,5)
<Multiversioned v2, Distributed chunk2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

Begin optimization report for: zgemm(const int, const int, const int, const double __complex__, const double __complex__ *, const int, const double __complex__ *, const int, const double __complex__, double __complex__ *__restrict__, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at zgemm-splat.c(105,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at zgemm-splat.c(106,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ztcopy_8.h(80,3) inlined into zgemm-splat.c(107,4)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at ztcopy_8.h(96,7) inlined into zgemm-splat.c(107,4)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (178:6) and *(boffset1+1008) (248:6)
         LOOP END
      LOOP END

      LOOP BEGIN at ztcopy_8.h(438,5) inlined into zgemm-splat.c(107,4)
      <Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at ztcopy_8.h(438,5) inlined into zgemm-splat.c(107,4)
      <Distributed chunk2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (481:4) and *(boffset1+496) (515:4)
      LOOP END

      LOOP BEGIN at ztcopy_8.h(622,5) inlined into zgemm-splat.c(107,4)
      <Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at ztcopy_8.h(622,5) inlined into zgemm-splat.c(107,4)
      <Distributed chunk2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (644:4) and *(boffset1+240) (660:4)
      LOOP END

      LOOP BEGIN at ztcopy_8.h(727,5) inlined into zgemm-splat.c(107,4)
      <Multiversioned v1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at ztcopy_8.h(727,5) inlined into zgemm-splat.c(107,4)
      <Multiversioned v2, Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at ztcopy_8.h(727,5) inlined into zgemm-splat.c(107,4)
      <Multiversioned v2, Distributed chunk2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at zgemm-splat.c(108,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at zgemm-splat.c(113,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at zgemm-splat.c(115,6)
               remark #15301: SIMD LOOP WAS VECTORIZED

               LOOP BEGIN at zgemm-splat.c(142,7)
               LOOP END
            LOOP END

            LOOP BEGIN at zgemm-splat.c(115,6)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
