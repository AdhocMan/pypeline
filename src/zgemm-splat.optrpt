Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: zgemm(const int, const int, const int, const double __complex__ *, const double __complex__ *, const int, const double __complex__ *, const int, const double __complex__ *, double __complex__ *__restrict__, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at zgemm-splat.c(88,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at zgemm-splat.c(89,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at zgemm-splat.c(91,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at zgemm-splat.c(96,17)
         <Distributed chunk1>
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at zgemm-splat.c(97,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (141:25) and C[(j+jb)*ldc+i+ib+7] (148:25)

               LOOP BEGIN at zgemm-splat.c(115,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at zgemm-splat.c(96,17)
         <Distributed chunk2>
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         LOOP END

         LOOP BEGIN at zgemm-splat.c(152,17)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (183:25) and C[(j+jb)*ldc+i+ib+3] (186:25)

            LOOP BEGIN at zgemm-splat.c(153,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (183:25) and C[(j+jb)*ldc+i+ib+3] (186:25)

               LOOP BEGIN at zgemm-splat.c(167,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at zgemm-splat.c(190,17)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (216:25) and C[(j+jb)*ldc+i+ib+1] (217:25)

            LOOP BEGIN at zgemm-splat.c(191,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (216:25) and C[(j+jb)*ldc+i+ib+1] (217:25)

               LOOP BEGIN at zgemm-splat.c(204,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at zgemm-splat.c(221,17)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at zgemm-splat.c(222,21)
               remark #15300: LOOP WAS VECTORIZED

               LOOP BEGIN at zgemm-splat.c(233,25)
               LOOP END
            LOOP END

            LOOP BEGIN at zgemm-splat.c(222,21)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: otcopy_8(int, int, const double __complex__ *, int, double __complex__ *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ztcopy_8.h(80,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztcopy_8.h(96,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (98:4) and *(boffset1+1008) (248:6)
   LOOP END
LOOP END

LOOP BEGIN at ztcopy_8.h(438,5)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(438,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (441:2) and *(boffset1+496) (515:4)
LOOP END

LOOP BEGIN at ztcopy_8.h(622,5)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(622,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (624:2) and *(boffset1+240) (660:4)
LOOP END

LOOP BEGIN at ztcopy_8.h(727,5)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(727,5)
<Multiversioned v2, Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ztcopy_8.h(727,5)
<Multiversioned v2, Distributed chunk2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

Begin optimization report for: zgemmexp(const int, const int, const int, const double __complex__ *, const double __complex__ *, const int, const double __complex__ *, const int, double __complex__ *__restrict__, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at zgemm-splat.c(262,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at zgemm-splat.c(263,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at zgemm-splat.c(265,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at zgemm-splat.c(270,17)
         <Distributed chunk1>
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at zgemm-splat.c(271,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (315:25) and C[(j+jb)*ldc+i+ib+7] (322:25)

               LOOP BEGIN at zgemm-splat.c(289,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at zgemm-splat.c(270,17)
         <Distributed chunk2>
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         LOOP END

         LOOP BEGIN at zgemm-splat.c(326,17)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (357:25) and C[(j+jb)*ldc+i+ib+3] (360:25)

            LOOP BEGIN at zgemm-splat.c(327,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (357:25) and C[(j+jb)*ldc+i+ib+3] (360:25)

               LOOP BEGIN at zgemm-splat.c(341,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at zgemm-splat.c(364,17)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (390:25) and C[(j+jb)*ldc+i+ib+1] (391:25)

            LOOP BEGIN at zgemm-splat.c(365,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (390:25) and C[(j+jb)*ldc+i+ib+1] (391:25)

               LOOP BEGIN at zgemm-splat.c(378,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at zgemm-splat.c(395,17)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at zgemm-splat.c(396,21)
               remark #15300: LOOP WAS VECTORIZED

               LOOP BEGIN at zgemm-splat.c(407,25)
               LOOP END
            LOOP END

            LOOP BEGIN at zgemm-splat.c(396,21)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
