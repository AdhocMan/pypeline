Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: otcopy_8(int, int, const double *, int, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at otcopy_8.h(80,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at otcopy_8.h(96,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (98:4) and *(boffset1+504) (248:6)
   LOOP END
LOOP END

LOOP BEGIN at otcopy_8.h(438,5)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at otcopy_8.h(438,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (441:2) and *(boffset1+248) (515:4)
LOOP END

LOOP BEGIN at otcopy_8.h(622,5)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at otcopy_8.h(622,5)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between *aoffset1 (624:2) and *(boffset1+120) (660:4)
LOOP END

LOOP BEGIN at otcopy_8.h(727,5)
<Multiversioned v1>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at otcopy_8.h(727,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at otcopy_8.h(727,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at otcopy_8.h(727,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

Begin optimization report for: dgemm(const int, const int, const int, const double, const double *, const int, const double *, const int, const double, double *__restrict__, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at dgemm-splat.c(89,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm-splat.c(90,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at otcopy_8.h(80,3) inlined into dgemm-splat.c(91,13)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at otcopy_8.h(96,7) inlined into dgemm-splat.c(91,13)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (178:6) and *(boffset1+504) (248:6)
         LOOP END
      LOOP END

      LOOP BEGIN at otcopy_8.h(438,5) inlined into dgemm-splat.c(91,13)
      <Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at otcopy_8.h(438,5) inlined into dgemm-splat.c(91,13)
      <Distributed chunk2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (481:4) and *(boffset1+248) (515:4)
      LOOP END

      LOOP BEGIN at otcopy_8.h(622,5) inlined into dgemm-splat.c(91,13)
      <Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at otcopy_8.h(622,5) inlined into dgemm-splat.c(91,13)
      <Distributed chunk2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (644:4) and *(boffset1+120) (660:4)
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(91,13)
      <Multiversioned v1>
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(91,13)
      <Remainder loop for vectorization, Multiversioned v1>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(91,13)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(91,13)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at dgemm-splat.c(93,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at dgemm-splat.c(98,17)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at dgemm-splat.c(99,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (144:25) and C[(j+jb)*ldc+i+ib+7] (151:25)

               LOOP BEGIN at dgemm-splat.c(117,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(155,17)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (186:25) and C[(j+jb)*ldc+i+ib+3] (189:25)

            LOOP BEGIN at dgemm-splat.c(156,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (186:25) and C[(j+jb)*ldc+i+ib+3] (189:25)

               LOOP BEGIN at dgemm-splat.c(170,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(193,17)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (219:25) and C[(j+jb)*ldc+i+ib+1] (220:25)

            LOOP BEGIN at dgemm-splat.c(194,21)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed OUTPUT dependence between C[(j+jb)*ldc+i+ib] (219:25) and C[(j+jb)*ldc+i+ib+1] (220:25)

               LOOP BEGIN at dgemm-splat.c(207,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(224,17)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dgemm-splat.c(225,21)
               remark #15300: LOOP WAS VECTORIZED

               LOOP BEGIN at dgemm-splat.c(236,25)
               LOOP END
            LOOP END

            LOOP BEGIN at dgemm-splat.c(225,21)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: dgemmexp(const int, const int, const int, const double, const double *__restrict__, const int, const double *__restrict__, const int, double __complex__ *__restrict__, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at dgemm-splat.c(264,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm-splat.c(265,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at otcopy_8.h(80,3) inlined into dgemm-splat.c(266,13)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at otcopy_8.h(96,7) inlined into dgemm-splat.c(266,13)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (178:6) and *(boffset1+504) (248:6)
         LOOP END
      LOOP END

      LOOP BEGIN at otcopy_8.h(438,5) inlined into dgemm-splat.c(266,13)
      <Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at otcopy_8.h(438,5) inlined into dgemm-splat.c(266,13)
      <Distributed chunk2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (481:4) and *(boffset1+248) (515:4)
      LOOP END

      LOOP BEGIN at otcopy_8.h(622,5) inlined into dgemm-splat.c(266,13)
      <Distributed chunk1>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END

      LOOP BEGIN at otcopy_8.h(622,5) inlined into dgemm-splat.c(266,13)
      <Distributed chunk2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between *boffset1 (644:4) and *(boffset1+120) (660:4)
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(266,13)
      <Multiversioned v1>
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(266,13)
      <Remainder loop for vectorization, Multiversioned v1>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(266,13)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at otcopy_8.h(727,5) inlined into dgemm-splat.c(266,13)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at dgemm-splat.c(268,13)
         remark #15301: SIMD LOOP WAS VECTORIZED

         LOOP BEGIN at dgemm-splat.c(274,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(275,21)
               remark #15548: loop was vectorized along with the outer loop

               LOOP BEGIN at dgemm-splat.c(294,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(332,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(333,21)
               remark #15548: loop was vectorized along with the outer loop

               LOOP BEGIN at dgemm-splat.c(347,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(370,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(371,21)
               remark #15548: loop was vectorized along with the outer loop

               LOOP BEGIN at dgemm-splat.c(384,25)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(402,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(403,21)
               remark #15548: loop was vectorized along with the outer loop

               LOOP BEGIN at dgemm-splat.c(414,25)
               LOOP END
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at dgemm-splat.c(268,13)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED

         LOOP BEGIN at dgemm-splat.c(274,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(275,21)
               remark #15548: loop was vectorized along with the outer loop
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(332,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(333,21)
               remark #15548: loop was vectorized along with the outer loop
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(370,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(371,21)
               remark #15548: loop was vectorized along with the outer loop
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm-splat.c(402,17)
            remark #15548: loop was vectorized along with the outer loop

            LOOP BEGIN at dgemm-splat.c(403,21)
               remark #15548: loop was vectorized along with the outer loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
